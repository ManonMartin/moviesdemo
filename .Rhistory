str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
htmlOutput("selected"),
tags$hr(),
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
output$selected <- renderUI({
HTML(paste0("<font size = 4px><b> ", "To watch based on: ", select_movies()$selected, " </b></font>"))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
htmlOutput("selected"),
tags$hr(),
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
output$selected <- renderUI({
HTML(paste0("<font size = 6px><b> ", "Selected movie: ", select_movies()$selected, " </b></font>"))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 5, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
htmlOutput("selected"),
tags$hr(),
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
output$selected <- renderUI({
HTML(paste0("<font size = 6px><b> ", "Selected movie: ", select_movies()$selected, " </b></font>"))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
library(moviesdemo)
library(moviesdemo)
runMovieApp()
devtools::use_vignette("my-vignette")
devtools::use_testthat()
library(moviesdemo)
library(moviesdemo)
library(moviesdemo)
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa")
file.exists("C:/Users/jchau/.ssh/id_rsa")
file.exists("C:/Users/jchau/.ssh/id_rsa.pub")
## Load movies df. (reduce 20 to 7 variables)
movies_full <- read.csv("inst/extdata/tmdb_5000_movies.csv")
movies_data <- data.frame(title = movies_full$title,
genres = movies_full$genres,
popularity = movies_full$popularity,
vote = movies_full$vote_average,
language = movies_full$original_language,
producers = movies_full$production_companies,
release = as.Date(movies_full$release_date),
runtime = movies_full$runtime,
plot = movies_full$overview)
rm(movies_full) ## remove full df.
setwd("C:/Users/jchau/Dropbox/PhD/Courses/Teaching/R_package_formation")
movies_full <- read.csv("tmdb_5000_movies.csv")
movies_data <- data.frame(title = movies_full$title,
genres = movies_full$genres,
popularity = movies_full$popularity,
vote = movies_full$vote_average,
language = movies_full$original_language,
producers = movies_full$production_companies,
release = as.Date(movies_full$release_date),
runtime = movies_full$runtime,
plot = movies_full$overview)
movies_full <- read.csv("tmdb_5000_movies1.csv")
movies_data <- data.frame(title = movies_full$title,
genres = movies_full$genres,
popularity = movies_full$popularity,
vote = movies_full$vote_average,
language = movies_full$original_language,
producers = movies_full$production_companies,
release = as.Date(movies_full$release_date),
runtime = movies_full$runtime,
plot = movies_full$overview)
which(movies_data$title == "Dude, whereb\0\031s My Car?")
View(movies_data)
grepl("^Dude", movies_data$title)
sum(grepl("^Dude", movies_data$title))
which(grepl("^Dude", movies_data$title))
movies_data$title[2736]
movies_data$title[4730]
movies_data$title[2736] <- "Dude, Where's My Car?"
movies_data <- movies_data[-c(2878, 3694, 4268),] ## 'The Host', 'Batman' and 'Out of the Blue' are listed twice
movies_data$genres <- sapply(1:dim(movies_data)[1], function(i) gsub("\".*$","",
tail(strsplit(as.character(movies_data$genres[i]), "\"name\": \"")[[1]], -1)))
movies_data$title <- as.character(movies_data$title)
which(grepl("^Dude", movies_data$title))
movies_data$title[2736]
movies_data$title[2735]
movies_data$title[2737]
movies_data$title[2736] <- "Dude, Where's My Car?"
rm(movies_full) ## remove full df.
movies_data$plot <- as.character(movies_data$plot)
movies_data$producers <- sapply(1:dim(movies_data)[1], function(i) gsub("\".*$","",
tail(strsplit(as.character(movies_data$producers[i]), "\"name\": \"")[[1]], -1)))
movies <- movies_data
devtools::use_data(movies, overwrite = T)
setwd("C:/Users/jchau/Dropbox/PhD/Latex_RFiles/R_code/Packages/moviesdemo")
devtools::use_data(movies, overwrite = T)
which(grepl("^Perrier", movies_data$title))
movies_data$title[3416]
movies_data$title[3416] <- "Perrier's Bounty"
movies <- movies_data
devtools::use_data(movies, overwrite = T)
grepl("^National Lampoon", movies_data$title)
which(grepl("^National Lampoon", movies_data$title))
movies_data$title[2528]
movies_data$title[2742]
movies_data$title[3456]
movies_data$title[3456] <- "National Lampoon's Van Wilder"
movies <- movies_data
devtools::use_data(movies, overwrite = T)
which(grepl("^The 41", movies_data$title))
movies_data$title[4277]
movies_data$title[4277] <- "The 41 Year Old Virgin Who Knocked Up Sarah Marshall and Felt Superbad About It"
movies <- movies_data
devtools::use_data(movies, overwrite = T)
runMovieApp()
library(moviesdemo)
runMovieApp()
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('C:/Users/jchau/Dropbox/PhD/Latex_RFiles/R_code/Apps/pdSpecEst')
library(moviesdemo)
runMovieApp()
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
runApp('inst/shiny-examples/myapp')
expect_equal(10, 10)
library(testthat)
expect_equal(10, 10)
expect_equal(10, 10 + 1E-7)
str(expect_equal(10, 10 + 1E-7))
expect_equal(10, 11)
library(testthat)
library(mgcv)
library(devtools)
library(RcppArmadillo)
detach("package:RcppArmadillo", unload=TRUE)
library(datasets)
library(doParalllel)
library(doParallel)
library(foreach)
library(testthat)
detach("package:doParallel", unload=TRUE)
library(git2r)
library(MASS)
message("Hello")
str(movies)
library(moviesdemo)
library(moviesdemo)
sim.genres(movies$title[1], movies$title[2])
sim.genres(movies$title[1], movies$title[1])
expect_equal(sim.genres(movies$title[1], movies$title[1]), 1)
sim.genres("A", movies$title[1])
expect_equal(sim.genres("Ava", movies$title[1]), 1)
expect_error(sim.genres(NA, movies$title[1]))
expect_is(sim.genres(movies$title[1], movies$title[2]), "numeric")
expect_is(sim.producers(movies$title[1], movies$title[2]), "numeric")
expect_equal(sim.producers(movies$title[1], movies$title[1]), 1)
expect_error(sim.producers(NA, movies$title[1]))
out <- advise.good.move(movies$title[1], 5, weights = rep(1,4))
out <- advise.good.movie(movies$title[1], 5, weights = rep(1,4))
str(out)
expect_is(str(out), "List of 4")
str(out)
expect_match(out[[1]], movies$title[1])
expect_output(str(out), "List of 4")
expect_equal(length(out[[2]]), 5)
expect_is(out[[2]], "chr")
expect_is(out[[2]], "character")
str(out[[2]])
expect_is(out[[2]], "character")
expect_error(advise.good.movie(movies$title[1], NA))
advise.good.movie(movies$title[1], NA)
expect_message(advise.good.movie(movies$title[1], NA), "Argument 'how_many' should be a number...")
expect_is(out[[3]], "integer")
expect_is(out[[4]], "numeric")
expect_error(advise.good.movie(movies$title[1], "Argument 'how_many' should be a number..."))
expect_error(advise.good.movie(movies$title[1], NA), "Argument 'how_many' should be a number...")
install.packages("rmarkdown", "knitr")
install.packages(c("knitr", "rmarkdown"))
setwd("~/Dropbox/PhD/Latex_RFiles/R_code/Packages/moviesdemo")
setwd("~/Dropbox/PhD/Latex_RFiles/R_code/Packages/moviesdemo")
movies <- moviesdemo::movies
str(movies)
movies <- moviesdemo::movies
devtools::use_data(movies, overwrite = T)
x <- sample(1, 1000)
x <- sample(1000)
devtools::use_data(movies, x, overwrite = T) ## overwrites existing data
getwd()
load("R/sysdata.rds")
devtools::use_data(movies, x, overwrite = T) ## overwrites existing data
load("R/sysdata.rda")
load("data/x.rda")
x <- sample(1000)
devtools::use_data(x, overwrite = T)
load("data/x.rda")
x <- sample(1000)
devtools::use_data(x, overwrite = T)
rm(x)
load("data/x.rda")
setwd("~/Dropbox/PhD/Courses/Teaching/R_package_formation")
str(movies)
write.csv(movies, "movies_raw.csv")
write.csv(movies)
str(movies)
movies <- movies
movies[1,]
View(movies)
library(moviesdemo)
library(ggplot2)
library(moviesdemo)
setwd("~/Dropbox/PhD/Latex_RFiles/R_code/Packages/moviesdemo")
library(moviesdemo)
library(moviesdemo)
library(moviesdemo)
library(moviesdemo)
library(moviesdemo)
library(moviesdemo)
?movies
library(Rcpp)
setwd("~/Dropbox/PhD/Courses/Teaching/R_package_formation")
sourceCpp("Source/Mat_exp.cpp")
sourceCpp("Source/Mat_exp.cpp")
library(pdSpecEst)
A <- matrix(complex(real = rnorm(9), imaginary = rnorm(9)), nrow = 3)
diag(A) <- rnorm(3)
A[lower.tri(A)] <- t(Conj(A))[lower.tri(A)]
A
mExp(A)
Expm(diag(3), A)
mExp_R <- function(A){
e <- eigen(A, symmetric = T)
e$vectors %*% diag(exp(e$values)) %*% t(Conj(e$vectors))
}
mExp_R(A)
microbenchmark::microbenchmark(mExp_R(A), mExp(A))
A <- matrix(complex(real = rnorm(100), imaginary = rnorm(100)), nrow = 10)
diag(A) <- rnorm(10)
A[lower.tri(A)] <- t(Conj(A))[lower.tri(A)]
A
microbenchmark::microbenchmark(mExp_R(A), mExp(A))
microbenchmark::microbenchmark(mExp_R(A), mExp(A), times = 1E4)
A <- matrix(complex(real = rnorm(4), imaginary = rnorm(4)), nrow = 2)
diag(A) <- rnorm(2)
A[lower.tri(A)] <- t(Conj(A))[lower.tri(A)]
microbenchmark::microbenchmark(mExp_R(A), mExp(A))
pdistR <- function(x, ys) {
sqrt((x - ys) ^ 2)
}
cppFunction('NumericVector pdistC(double x, NumericVector ys) {
int n = ys.size();
NumericVector out(n);
for(int i = 0; i < n; ++i) {
out[i] = sqrt(pow(ys[i] - x, 2.0));
}
return out;
}')
x = 1
ys = rnorm(100)
pDistR(x, ys)
pdistR(x, ys)
pdistC(x, ys)
microbenchmark::microbenchmark(pdistR(x, ys), pdistC(x, ys))
library(c("Rcpp", "RcppArmadillo"))
library(Rcpp)
library(RcppArmadillo)
cppFunction(depends = "RcppArmadillo",
'arma::cx_mat mExp_C(arma::cx_mat A) {
arma::cx_mat A_exp = arma::expmat(A);
return A_exp;
}')
A <- matrix(complex(real = rnorm(4), imaginary = rnorm(4)), nrow = 2)
mExp_C(A)
mExp_R <- function(A){
e <- eigen(A, symmetric = T)
e$vectors %*% diag(exp(e$values)) %*% t(Conj(e$vectors))
}
mExp_R(A)
mExp_R <- function(A){
e <- eigen(A)
e$vectors %*% diag(exp(e$values)) %*% t(Conj(e$vectors))
}
mExp_R(A)
A
mExp_C(A)
cppFunction(depends = "RcppArmadillo",
'arma::cx_mat mExp_C(arma::cx_mat A) {
arma::cx_mat A_exp = arma::expmat(A);
return A_exp;
}')
A <- matrix(complex(real = rnorm(4), imaginary = rnorm(4)), nrow = 2)
A
mExp_C(A)
mExp_R <- function(A){
e <- eigen(A)
e$vectors %*% diag(exp(e$values)) %*% t(Conj(e$vectors))
}
mExp_R(A)
mExp_R <- function(A){
e <- eigen(A)
e$vectors %*% diag(exp(e$values)) %*% solve(e$vectors)
}
mExp_R(A)
microbenchmark::microbenchmark(mExp_R(A), mExp_C(A))
A <- matrix(complex(real = rnorm(100), imaginary = rnorm(100)), nrow = 10)
microbenchmark::microbenchmark(mExp_R(A), mExp_C(A))
A <- matrix(complex(real = rnorm(4), imaginary = rnorm(4)), nrow = 2)
microbenchmark::microbenchmark(mExp_R(A), mExp_C(A))
