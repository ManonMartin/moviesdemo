mainPanel(
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0(i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")")
str2 <- paste0("Plot: ", movies$plot[select_movies()$movie_ids[i]])
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Runtime: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b>")
str2 <- paste0("Plot: ", movies$plot[select_movies()$movie_ids[i]])
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release date: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/><br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b>")
str2 <- paste0("<font size="2">", movies$plot[select_movies()$movie_ids[i]], "</font>")
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release date: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b>")
str2 <- paste0("<font size="2">", movies$plot[select_movies()$movie_ids[i]], "</font>")
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release date: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b>")
str2 <- paste0("<font size=20px>", movies$plot[select_movies()$movie_ids[i]], "</font>")
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release date: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b>")
str2 <- paste0("<font size=4px>", movies$plot[select_movies()$movie_ids[i]], "</font>")
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release date: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 5px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px>", movies$plot[select_movies()$movie_ids[i]], "</font>")
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release date: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 5px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px>", movies$plot[select_movies()$movie_ids[i]], "</font>")
str3 <- paste0("Language: ", movies$language[select_movies()$movie_ids[i]])
str4 <- paste0("Release date: ", movies$release[select_movies()$movie_ids[i]])
str5 <- paste0("Length: ", movies$runtime[select_movies()$movie_ids[i]], "min.")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, ", ", str4, ", ", str5, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
htmlOutput("selected"),
tags$hr(),
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
output$selected <- renderUI({
HTML(paste0("<font size = 4px><b> ", "To watch based on: ", select_movies()$selected, " </b></font>"))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 10, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
htmlOutput("selected"),
tags$hr(),
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
output$selected <- renderUI({
HTML(paste0("<font size = 6px><b> ", "Selected movie: ", select_movies()$selected, " </b></font>"))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Demo movie-selection app"),
sidebarLayout(
sidebarPanel(
selectizeInput("movie", label = "Movie choice", selected = "Avatar", choices = NULL,
multiple = FALSE, options = list(placeholder = 'Type a movie name')),
numericInput("how_many", "How many movies to advise?", 5, 1, 100, 1),
tags$hr(),
sliderInput("genre", "How important is the genre?", value = 5, min = 0, max = 5, step = 1),
sliderInput("pop", "How important is the popularity?", value = 1, min = 0, max = 5, step = 1),
sliderInput("rating", "How important is the rating?", value = 1, min = 0, max = 5, step = 1),
sliderInput("producer", "How important is the production company?", value = 1, min = 0, max = 5, step = 1),
tags$hr(),
actionButton("newpar", label = "Update movie advice!")
),
mainPanel(
htmlOutput("selected"),
tags$hr(),
uiOutput("advised_movies")
)
)
)
server <- function(input, output, session){
updateSelectizeInput(session, 'movie', choices = movies$title, server = TRUE)
max_movies <- eventReactive(eventExp = input$newpar, valueExpr = isolate(input$how_many))
select_movies <- eventReactive(eventExp = input$newpar, valueExpr = {
advise.good.movie(isolate(input$movie), isolate(input$how_many), weights = c(isolate(input$genre),
isolate(input$pop), isolate(input$rating), isolate(input$producer)))
})
output$selected <- renderUI({
HTML(paste0("<font size = 6px><b> ", "Selected movie: ", select_movies()$selected, " </b></font>"))
})
##### Create divs######
output$advised_movies <- renderUI({
text_output_list <- lapply(1:max_movies(), function(i) {
name <- paste("textbox_", i, sep="")
htmlOutput(name)
})
do.call(tagList, text_output_list)
})
observe({
lapply(1:max_movies(), function(i){
output[[paste("textbox_", i, sep="")]] <- renderUI({
str1 <- paste0("<font size = 4px><b> ", i, ". ", select_movies()$to_watch[i], ", (similarity score: ",
round(select_movies()$scores[i], digits = 2), ")", " </b></font>")
str2 <- paste0("<font size=2px><i>", movies$plot[select_movies()$movie_ids[i]], "</font></i>")
str3 <- paste0("<font size=2px>", "Language: ", movies$language[select_movies()$movie_ids[i]],
", Release date: ", movies$release[select_movies()$movie_ids[i]], ", Length: ",
movies$runtime[select_movies()$movie_ids[i]], "min.", "</font>")
HTML(paste('<br/>', str1, '<br/>', str2, '<br/>', str3, '<br/><br/>', sep = ""))
})
})
})
}
shinyApp(ui = ui, server = server)
library(moviesdemo)
library(moviesdemo)
runMovieApp()
devtools::use_vignette("my-vignette")
devtools::use_testthat()
library(moviesdemo)
library(moviesdemo)
library(moviesdemo)
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa")
file.exists("C:/Users/jchau/.ssh/id_rsa")
file.exists("C:/Users/jchau/.ssh/id_rsa.pub")
